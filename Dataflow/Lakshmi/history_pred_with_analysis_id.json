{"dataflow":{"dfKey":"293f0055-ec5e-4d06-8457-a56bbc941692","name":"history_pred_with_analysis_id","tags":null,"description":"","definition":"{\"name\":\"history_pred_with_analysis_id\",\"description\":\"\",\"version\":0,\"parameters\":\"[{\\\"name\\\":\\\"limit_rows\\\",\\\"defValueInInteractiveMode\\\":\\\"limit 1000\\\",\\\"defValueInBatchMode\\\":\\\"limit 10\\\"},{\\\"name\\\":\\\"future_forecast\\\",\\\"defValueInInteractiveMode\\\":\\\"3\\\",\\\"defValueInBatchMode\\\":\\\"3\\\"},{\\\"name\\\":\\\"Analysis_ID\\\",\\\"defValueInInteractiveMode\\\":\\\"1c81918a-8862-5447-7c00-78ae6b2da013\\\",\\\"defValueInBatchMode\\\":\\\"1c81918a-8862-5447-7c00-78ae6b2da013\\\"}]\",\"livyServerId\":0,\"engineVariableName\":\"\",\"components\":[{\"udfNames\":[],\"componentId\":0,\"componentName\":\"startComponent\",\"tableName\":\"\",\"category\":\"Start\",\"componentType\":\"UDF\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":0,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.UDFComponent\",\"excludeNotification\":\"N\"},{\"dbScripts\":[{\"script\":\"\\r\\ndo $$\\r\\nbegin\\r\\ndeclare\\r\\nv_script character varying;\\r\\npartition_tab_name character varying(50);\\r\\nv_count numeric;\\r\\nbegin\\r\\n\\t\\t\\tSELECT REPLACE (\\u0027$[Analysis_ID]\\u0027, \\u0027-\\u0027, \\u0027_\\u0027) into partition_tab_name;\\r\\n\\r\\nv_script:\\u003d\\u0027select count(*)  from pg_class where relname \\u003d \\u0027\\u0027t_dm_prediction_stg_\\u0027||partition_tab_name||\\u0027\\u0027\\u0027\\u0027;\\r\\nexecute v_script into v_count;\\r\\n\\r\\nif(v_count\\u003e0)\\r\\nthen\\r\\nv_script :\\u003d \\u0027drop table t_dm_prediction_stg_\\u0027||partition_tab_name;\\r\\nexecute v_script;\\r\\nend if;\\r\\nv_script :\\u003d \\u0027CREATE TABLE t_dm_prediction_stg_\\u0027||partition_tab_name||\\u0027 PARTITION OF T_DM_ANALYSIS_PREDICTION_STG FOR VALUES IN (\\u0027||\\u0027\\u0027\\u0027$[Analysis_ID]\\u0027\\u0027\\u0027||\\u0027)\\u0027;\\r\\nexecute v_script;\\r\\n\\r\\n\\r\\nv_script:\\u003d\\u0027select count(*)  from pg_class where relname \\u003d \\u0027\\u0027t_dm_prediction_\\u0027||partition_tab_name||\\u0027\\u0027\\u0027\\u0027;\\r\\nexecute v_script into v_count;\\r\\n\\r\\nif(v_count\\u003e0)\\r\\nthen\\r\\nv_script :\\u003d \\u0027drop table t_dm_prediction_\\u0027||partition_tab_name;\\r\\nexecute v_script;\\r\\nend if;\\r\\nv_script :\\u003d \\u0027CREATE TABLE t_dm_prediction_\\u0027||partition_tab_name||\\u0027 PARTITION OF T_DM_ANALYSIS_PREDICTION FOR VALUES IN (\\u0027||\\u0027\\u0027\\u0027$[Analysis_ID]\\u0027\\u0027\\u0027||\\u0027)\\u0027;\\r\\nexecute v_script;\\r\\n\\r\\nend;\\r\\nend$$;\",\"executionOrder\":1,\"title\":\"\"}],\"componentId\":1,\"componentName\":\"Truncate_stg_table\",\"tableName\":\"Truncate_stg_table\",\"category\":\"Processor\",\"componentType\":\"DB script\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":10,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.DBScriptComponent\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"enableTrim\":\"N\",\"easyQueryDefJson\":{\"sqlQuery\":\"\"},\"componentId\":2,\"componentName\":\"Read_Data_for_Time_series\",\"tableName\":\"Read_Data_for_Time_series\",\"category\":\"Source\",\"componentType\":\"JDBC\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":10,\"dependencies\":[1],\"options\":{\"dbTable\":\"select * from (\\r\\nselect ARD.ANALYSIS_MEASURE_ID, ARD.CATEGORY, ARD.ACTUAL_VALUE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then AP.PREDICTION_TYPE else MP.PREDICTION_TYPE end as PREDICTION_TYPE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_DEF else M.PREDICTION_DEF end as PREDICTION_METH_DEF,\\r\\nAR.RUN_DATE,\\r\\ncount(ARD.ANALYSIS_DETAIL_RUN_ID) OVER (PARTITION BY ARD.CATEGORY, ARD.ANALYSIS_MEASURE_ID) as ANALYSIS_DETAIL_CNT\\r\\nfrom\\r\\nT_DM_ANALYSIS_RUN_DETAILS ARD,T_DM_ANALYSIS_MEASURE M, T_DM_PREDICTION_METHOD AP, T_DM_ANALYSIS A,T_DM_ANALYSIS_RUN AR, \\r\\n\\tT_DM_PREDICTION_METHOD MP\\r\\nwhere\\r\\nAR.ANALYSIS_ID\\u003dA.ANALYSIS_ID\\r\\nand ARD.ANALYSIS_MEASURE_ID\\u003dM.ANALYSIS_MEASURE_ID\\r\\n--and ARD.ANALYSIS_ID\\u003dAR.ANALYSIS_ID\\r\\nand M.PREDICTION_METH_ID \\u003d MP.PREDICTION_METHOD_ID\\r\\nand M.PREDICTION_METH_ID \\u003d AP.PREDICTION_METHOD_ID\\r\\nand AR.ANALYSIS_RUN_ID\\u003dARD.ANALYSIS_RUN_ID\\r\\nand AR.ANALYSIS_ID\\u003dM.ANALYSIS_ID\\r\\nand A.ENABLE_PREDICTION\\u003d\\u0027Y\\u0027\\r\\n\\tand A.ANALYSIS_ID\\u003d\\u0027$[Analysis_ID]\\u0027\\r\\n\\tAND  ARD.ANALYSIS_ID\\u003d\\u0027$[Analysis_ID]\\u0027\\r\\n--and A.df_id \\u003dcase when \\u00271b8f166a-8a9c-4848-8b2e-e881a4d9e97f\\u0027 \\u003d \\u0027All Analysis\\u0027 then A.df_id else \\r\\n--\\t\\u00271b8f166a-8a9c-4848-8b2e-e881a4d9e97f\\u0027 end\\r\\nand (case when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_ID else M.PREDICTION_METH_ID end) \\u003d 3\\r\\nand (ARD.PREDICTION_USE\\u003d\\u0027Y\\u0027 AND AR.PREDICTION_USE\\u003d\\u0027Y\\u0027)\\r\\nand ARD.ACTUAL_VALUE is not null\\r\\n\\t--and AR.ANALYSIS_ID\\u003dARD.ANALYSIS_ID\\r\\n\\r\\n) a where ANALYSIS_DETAIL_CNT \\u003e CAST (( case when PREDICTION_METH_DEF like \\u0027%minDataPoints%\\u0027 then \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t   (PREDICTION_METH_DEF::jsonb -\\u003e \\u0027minDataPoints\\u0027) else \\u002715\\u0027 end) as numeric) \"},\"className\":\"com.datagaps.dataflow.models.JDBCComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"code\":\"from pyspark.sql.types import *\\nimport pandas as pd\\nfrom prophet import Prophet\\nfrom pyspark.sql.types import StructType,StructField,StringType,TimestampType,ArrayType,DoubleType\\nfrom pyspark.sql.functions import current_date, countDistinct\\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\\nfrom pyspark import StorageLevel \\nfrom datetime import datetime\\nimport ast\\nimport distutils\\nimport distutils.util\\n\\nsql_statement \\u003d \\u0027\\u0027\\u0027\\n  SELECT\\n  \\u0027$[Analysis_ID]\\u0027 as analysis_id,\\n    analysis_measure_id,\\n    category,\\n    first(prediction_meth_def) as json_def,\\n    CAST(run_date as date) as ds,\\n    CAST(SUM(actual_value) as Int) as y\\n  FROM Read_Data_for_Time_series\\n  GROUP BY analysis_measure_id,category, run_date\\n  ORDER BY analysis_measure_id,category, run_date\\n  \\u0027\\u0027\\u0027\\n \\ntime_series_data \\u003d (\\n  spark\\n    .sql( sql_statement )\\n    .repartition(sc.defaultParallelism, [\\u0027analysis_measure_id\\u0027,\\u0027category\\u0027])\\n  ).cache()\\n  \\ntime_series_data.createOrReplaceTempView(\\u0027ts_data\\u0027)\\n  \\nresult_schema \\u003dStructType([\\n  StructField(\\u0027ds\\u0027,DateType()),\\n  StructField(\\u0027analysis_measure_id\\u0027,StringType()),\\n  StructField(\\u0027category\\u0027,StringType()),\\n   StructField(\\u0027analysis_id\\u0027,StringType()),\\n  StructField(\\u0027y\\u0027,FloatType()),\\n  StructField(\\u0027yhat\\u0027,FloatType()),\\n  StructField(\\u0027yhat_upper\\u0027,FloatType()),\\n  StructField(\\u0027yhat_lower\\u0027,FloatType())\\n  ])\\n  \\n  \\ndef forecast_time_series( history_pd: pd.DataFrame) -\\u003e pd.DataFrame:\\n  \\n  # TRAIN MODEL AS BEFORE\\n  # --------------------------------------\\n  # remove missing values\\n  history_pd\\u003dhistory_pd.dropna()\\n  parameters\\u003dast.literal_eval(history_pd[\\u0027json_def\\u0027].iloc[0])\\n  #print(parameters)\\n  history_pd.drop([\\u0027json_def\\u0027],axis\\u003d1)\\n  # configure the model\\n  model \\u003d Prophet(\\n    interval_width\\u003dfloat(parameters[\\u0027confidenceInterval\\u0027]),\\n    growth\\u003d\\u0027linear\\u0027,\\n    daily_seasonality\\u003dbool(distutils.util.strtobool(parameters[\\u0027seasonality\\u0027][\\u0027daily\\u0027])),\\n    weekly_seasonality\\u003dbool(distutils.util.strtobool(parameters[\\u0027seasonality\\u0027][\\u0027weekly\\u0027])),\\n    yearly_seasonality\\u003dbool(distutils.util.strtobool(parameters[\\u0027seasonality\\u0027][\\u0027yearly\\u0027])),\\n    seasonality_mode\\u003d\\u0027multiplicative\\u0027\\n    )\\n  \\n  # train the model\\n  model.fit( history_pd )\\n  # --------------------------------------\\n  \\n  # BUILD FORECAST AS BEFORE\\n  # --------------------------------------\\n  # make predictions\\n  future_pd \\u003d model.make_future_dataframe(\\n    periods\\u003d$[future_forecast], \\n    freq\\u003d\\u0027d\\u0027, \\n    include_history\\u003dTrue\\n    )\\n  forecast_pd \\u003d model.predict( future_pd )  \\n  # --------------------------------------\\n  \\n  # ASSEMBLE EXPECTED RESULT SET\\n  # --------------------------------------\\n  # get relevant fields from forecast\\n  f_pd \\u003d forecast_pd[ [\\u0027ds\\u0027,\\u0027yhat\\u0027, \\u0027yhat_upper\\u0027, \\u0027yhat_lower\\u0027] ].set_index(\\u0027ds\\u0027)\\n  \\n  # get relevant fields from history\\n  h_pd \\u003d history_pd[[\\u0027ds\\u0027,\\u0027analysis_measure_id\\u0027,\\u0027analysis_id\\u0027,\\u0027category\\u0027,\\u0027y\\u0027]].set_index(\\u0027ds\\u0027)\\n  \\n  # join history and forecast\\n  results_pd \\u003d f_pd.join( h_pd, how\\u003d\\u0027left\\u0027 )\\n  results_pd.reset_index(level\\u003d0, inplace\\u003dTrue)\\n  \\n  # get store \\u0026 item from incoming data set\\n  results_pd[\\u0027analysis_measure_id\\u0027] \\u003d history_pd[\\u0027analysis_measure_id\\u0027].iloc[0]\\n  results_pd[\\u0027category\\u0027] \\u003d history_pd[\\u0027category\\u0027].iloc[0]\\n  results_pd[\\u0027analysis_id\\u0027] \\u003d history_pd[\\u0027analysis_id\\u0027].iloc[0]\\n  # --------------------------------------\\n  \\n  \\n  return results_pd[ [\\u0027ds\\u0027, \\u0027analysis_measure_id\\u0027,\\u0027analysis_id\\u0027,\\u0027category\\u0027, \\u0027y\\u0027, \\u0027yhat\\u0027, \\u0027yhat_upper\\u0027, \\u0027yhat_lower\\u0027] ]\\n\\nresults \\u003d (\\n  time_series_data\\n    .groupBy(\\u0027analysis_measure_id\\u0027,\\u0027category\\u0027)\\n      .applyInPandas(forecast_time_series, schema\\u003dresult_schema)\\n    .withColumn(\\u0027training_date\\u0027, current_date())\\n    )\\n    \\nresults.createOrReplaceTempView(\\u0027small_ts_data\\u0027)\\n\\noutput\\u003dspark.sql(\\\"select ds as PREDICTION_DATE ,analysis_measure_id as ANALYSIS_MEASURE_ID ,category as CATEGORY,analysis_id as ANALYSIS_ID,round(yhat,3) as PREDICTED_VALUE ,round(yhat_upper,3) as UPPER_BOUND,round(yhat_lower,3) as LOWER_BOUND,training_date as RUN_DATE,3 as PREDICTION_METHOD_ID,unix_timestamp(ds) as prediction_run_id  from  small_ts_data\\\")\\n\\noutput.createOrReplaceTempView(\\u0027output_time_series_data\\u0027)\\noutput.cache()\\noutput.count()\\n\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"componentId\":3,\"componentName\":\"Time_Series_Modelling\",\"tableName\":\"output_time_series_data\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[2],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"schemaName\":\"public\",\"sourceDataFrame\":\"output_time_series_data\",\"saveMode\":\"append\",\"numPartitions\":0,\"mapping\":[{\"sourceColumn\":\"PREDICTION_DATE\",\"sourceType\":\"date\",\"targetColumn\":\"prediction_date\",\"targetType\":\"timestamp without time zone\",\"originalSourceType\":\"date\",\"orginalTargetType\":\"timestamp without time zone\"},{\"sourceColumn\":\"ANALYSIS_MEASURE_ID\",\"sourceType\":\"string\",\"targetColumn\":\"analysis_measure_id\",\"targetType\":\"character varying\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"character varying\"},{\"sourceColumn\":\"CATEGORY\",\"sourceType\":\"string\",\"targetColumn\":\"category\",\"targetType\":\"text\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"text\"},{\"sourceColumn\":\"ANALYSIS_ID\",\"sourceType\":\"string\",\"targetColumn\":\"analysis_id\",\"targetType\":\"character varying\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"character varying\"},{\"sourceColumn\":\"PREDICTED_VALUE\",\"sourceType\":\"float\",\"targetColumn\":\"predicted_value\",\"targetType\":\"numeric\",\"originalSourceType\":\"float\",\"orginalTargetType\":\"numeric\"},{\"sourceColumn\":\"UPPER_BOUND\",\"sourceType\":\"float\",\"targetColumn\":\"upper_bound\",\"targetType\":\"numeric\",\"originalSourceType\":\"float\",\"orginalTargetType\":\"numeric\"},{\"sourceColumn\":\"LOWER_BOUND\",\"sourceType\":\"float\",\"targetColumn\":\"lower_bound\",\"targetType\":\"numeric\",\"originalSourceType\":\"float\",\"orginalTargetType\":\"numeric\"},{\"sourceColumn\":\"RUN_DATE\",\"sourceType\":\"date\",\"targetColumn\":\"run_date\",\"targetType\":\"timestamp without time zone\",\"originalSourceType\":\"date\",\"orginalTargetType\":\"timestamp without time zone\"},{\"sourceColumn\":\"PREDICTION_METHOD_ID\",\"sourceType\":\"integer\",\"targetColumn\":\"prediction_method_id\",\"targetType\":\"numeric\",\"originalSourceType\":\"integer\",\"orginalTargetType\":\"numeric\"},{\"sourceColumn\":\"prediction_run_id\",\"sourceType\":\"long\",\"targetColumn\":\"prediction_run_id\",\"targetType\":\"numeric\",\"originalSourceType\":\"long\",\"orginalTargetType\":\"numeric\"}],\"componentId\":4,\"componentName\":\"Save_Predictions\",\"tableName\":\"t_dm_analysis_prediction_stg\",\"category\":\"Sink\",\"componentType\":\"DB sink\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":0,\"dependencies\":[3],\"options\":{\"numPartitions\":\"4\",\"batchsize\":\"1000\"},\"className\":\"com.datagaps.dataflow.models.DBSyncComponent\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"dbScripts\":[{\"script\":\"do $$\\r\\n\\u003c\\u003cscript_block\\u003e\\u003e\\r\\nbegin\\r\\ninsert into \\r\\nT_DM_ANALYSIS_PREDICTION_STG (\\r\\nANALYSIS_ID,\\r\\nANALYSIS_MEASURE_ID,\\r\\nPREDICTION_RUN_ID,\\r\\nPREDICTION_METHOD_ID,\\r\\nCATEGORY,\\r\\nPREDICTION_DATE,\\r\\nPREDICTED_VALUE,\\r\\nLOWER_BOUND,\\r\\nUPPER_BOUND) \\r\\nselect ANALYSIS_ID,ANALYSIS_MEASURE_ID,EXTRACT(EPOCH FROM RUN_DATE at time zone (SELECT current_setting(\\u0027TIMEZONE\\u0027)) at time zone \\u0027utc\\u0027) as PREDICTION_RUN_ID,4,CATEGORY,RUN_DATE,ROUND(CAST(mean AS NUMERIC),3) as prediction_Value,ROUND(CAST(mean-zscore*STD_DEV AS NUMERIC),3) as lower_bound,ROUND(CAST(mean+zscore*STD_DEV AS NUMERIC),3) as upper_bound from\\r\\n(select ANALYSIS_ID,ANALYSIS_MEASURE_ID,PREDICTION_TYPE,CATEGORY,AVG(ACTUAL_VALUE) OVER (PARTITION BY (CATEGORY, ANALYSIS_MEASURE_ID) ORDER BY RUN_DATE ROWS 15 PRECEDING ) as mean,\\r\\n STDDEV(ACTUAL_VALUE) OVER (PARTITION BY (CATEGORY, ANALYSIS_MEASURE_ID) ORDER BY RUN_DATE ROWS 15 PRECEDING ) as STD_DEV\\r\\n,cast((case when PREDICTION_METH_DEF like \\u0027%standardDeviation%\\u0027 then (PREDICTION_METH_DEF::jsonb -\\u003e \\u0027standardDeviation\\u0027) else \\u00273\\u0027 end) as float) as zscore,RUN_DATE+interval \\u00271\\u0027 day as RUN_DATE,ANALYSIS_DETAIL_CNT,\\r\\n CAST (( case when PREDICTION_METH_DEF like \\u0027%minDataPoints%\\u0027 then (PREDICTION_METH_DEF::jsonb -\\u003e\\u0027minDataPoints\\u0027) else \\u00273\\u0027 end) as numeric) as minDataPoints \\r\\n from\\r\\n(select ARD.ANALYSIS_ID,ARD.ANALYSIS_MEASURE_ID, ARD.CATEGORY, ARD.ACTUAL_VALUE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then AP.PREDICTION_TYPE else MP.PREDICTION_TYPE end as PREDICTION_TYPE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_DEF else M.PREDICTION_DEF end as PREDICTION_METH_DEF,\\r\\ncount(ARD.ANALYSIS_DETAIL_RUN_ID) OVER (PARTITION BY (ARD.CATEGORY, ARD.ANALYSIS_MEASURE_ID) ORDER BY AR.RUN_DATE ROWS 15 PRECEDING )  as ANALYSIS_DETAIL_CNT,AR.RUN_DATE\\r\\nfrom\\r\\nT_DM_ANALYSIS_RUN_DETAILS ARD,T_DM_ANALYSIS_MEASURE M, T_DM_PREDICTION_METHOD AP, T_DM_ANALYSIS A,T_DM_ANALYSIS_RUN AR, T_DM_PREDICTION_METHOD MP\\r\\nwhere\\r\\nAR.ANALYSIS_ID\\u003dA.ANALYSIS_ID\\r\\nand ARD.ANALYSIS_MEASURE_ID\\u003dM.ANALYSIS_MEASURE_ID\\r\\nand M.PREDICTION_METH_ID \\u003d MP.PREDICTION_METHOD_ID\\r\\nand M.PREDICTION_METH_ID \\u003d AP.PREDICTION_METHOD_ID\\r\\nand AR.ANALYSIS_RUN_ID\\u003dARD.ANALYSIS_RUN_ID\\r\\nand AR.ANALYSIS_ID\\u003dM.ANALYSIS_ID\\r\\nand (case when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_ID else M.PREDICTION_METH_ID end) \\u003d 4\\r\\nand (ARD.PREDICTION_USE\\u003d\\u0027Y\\u0027 AND AR.PREDICTION_USE\\u003d\\u0027Y\\u0027)\\r\\nand A.ENABLE_PREDICTION\\u003d\\u0027Y\\u0027\\r\\nAND  ARD.ANALYSIS_ID\\u003dcase when \\u0027$[Analysis_ID]\\u0027 \\u003d \\u0027All Analysis\\u0027 then ARD.ANALYSIS_ID else \\u0027$[Analysis_ID]\\u0027 end\\r\\n--and a.df_id \\u003dcase when \\u0027$[Dataflow_ID]\\u0027 \\u003d \\u0027All Analysis\\u0027 then A.df_id else \\u0027$[Dataflow_ID]\\u0027 end\\r\\n) a  ) pred where analysis_detail_cnt\\u003e\\u003dminDataPoints;\\r\\nEND script_block $$;\\r\\n\",\"executionOrder\":1,\"title\":\"\"}],\"componentId\":5,\"componentName\":\"STD_Prediction\",\"tableName\":\"STD_Prediction\",\"category\":\"Processor\",\"componentType\":\"DB script\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":10,\"dependencies\":[1],\"className\":\"com.datagaps.dataflow.models.DBScriptComponent\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"dbScripts\":[{\"script\":\"do $$\\r\\n\\u003c\\u003cscript_block\\u003e\\u003e\\r\\nbegin\\r\\ninsert into \\r\\nT_DM_ANALYSIS_PREDICTION_STG (\\r\\nANALYSIS_ID,\\r\\nANALYSIS_MEASURE_ID,\\r\\nPREDICTION_RUN_ID,\\r\\nPREDICTION_METHOD_ID,\\r\\nCATEGORY,\\r\\nPREDICTION_DATE,\\r\\nPREDICTED_VALUE,\\r\\nLOWER_BOUND,\\r\\nUPPER_BOUND) select ANALYSIS_ID,ANALYSIS_MEASURE_ID,EXTRACT(EPOCH FROM (RUN_DATE + interval \\u00271\\u0027 day) at time zone (SELECT current_setting(\\u0027TIMEZONE\\u0027)) at time zone \\u0027utc\\u0027) as PREDICTION_RUN_ID,5,CATEGORY,RUN_DATE + interval \\u00271\\u0027 day as RUN_DATE,ROUND(CAST(percentile_50 AS NUMERIC),3) as prediction_Value,ROUND(CAST((percentile_25)-IQR*(percentile_75-percentile_25) AS NUMERIC),3) as lower_bound,ROUND(CAST((percentile_75)+IQR*(percentile_75-percentile_25) AS NUMERIC),3) as upper_bound from \\r\\n(select ANALYSIS_ID,ANALYSIS_MEASURE_ID,PREDICTION_TYPE,CATEGORY,percentile_cont(0.25) within group (order by ACTUAL_VALUE asc) as percentile_25,percentile_cont(0.50) within group (order by ACTUAL_VALUE asc) as percentile_50,percentile_cont(0.75) within group (order by ACTUAL_VALUE asc) as percentile_75\\r\\n,cast((case when PREDICTION_METH_DEF like \\u0027%iqrConstant%\\u0027 then (PREDICTION_METH_DEF::jsonb -\\u003e \\u0027iqrConstant\\u0027) else \\u00271.5\\u0027 end) as float) as IQR\\r\\n, max(RUN_DATE) AS RUN_DATE from \\r\\n(select ARD.ANALYSIS_ID,ARD.ANALYSIS_MEASURE_ID, ARD.CATEGORY, ARD.ACTUAL_VALUE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then AP.PREDICTION_TYPE else MP.PREDICTION_TYPE end as PREDICTION_TYPE,\\r\\ncase when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_DEF else M.PREDICTION_DEF end as PREDICTION_METH_DEF,\\r\\nAR.RUN_DATE,\\r\\ncount(ARD.ANALYSIS_DETAIL_RUN_ID) OVER (PARTITION BY ARD.CATEGORY, ARD.ANALYSIS_MEASURE_ID) as ANALYSIS_DETAIL_CNT\\r\\nfrom\\r\\nT_DM_ANALYSIS_RUN_DETAILS ARD,T_DM_ANALYSIS_MEASURE M, T_DM_PREDICTION_METHOD AP, T_DM_ANALYSIS A,T_DM_ANALYSIS_RUN AR, T_DM_PREDICTION_METHOD MP\\r\\nwhere\\r\\nAR.ANALYSIS_ID\\u003dA.ANALYSIS_ID\\r\\nand ARD.ANALYSIS_MEASURE_ID\\u003dM.ANALYSIS_MEASURE_ID\\r\\nand M.PREDICTION_METH_ID \\u003d MP.PREDICTION_METHOD_ID\\r\\nand M.PREDICTION_METH_ID \\u003d AP.PREDICTION_METHOD_ID\\r\\nand AR.ANALYSIS_RUN_ID\\u003dARD.ANALYSIS_RUN_ID\\r\\nand AR.ANALYSIS_ID\\u003dM.ANALYSIS_ID\\r\\nand (case when M.PREDICTION_METH_ID \\u003d 1 then A.DFLT_PREDICTION_METH_ID else M.PREDICTION_METH_ID end) \\u003d 5\\r\\nand (ARD.PREDICTION_USE\\u003d\\u0027Y\\u0027 AND AR.PREDICTION_USE\\u003d\\u0027Y\\u0027)\\r\\nand A.ENABLE_PREDICTION\\u003d\\u0027Y\\u0027 \\r\\nAND  ARD.ANALYSIS_ID\\u003dcase when \\u0027$[Analysis_ID]\\u0027 \\u003d \\u0027All Analysis\\u0027 then ARD.ANALYSIS_ID else \\u0027$[Analysis_ID]\\u0027 end\\r\\n--and a.df_id \\u003dcase when \\u0027$[Dataflow_ID]\\u0027 \\u003d \\u0027All Analysis\\u0027 then A.df_id else \\u0027$[Dataflow_ID]\\u0027 end\\r\\n) a where ANALYSIS_DETAIL_CNT \\u003e CAST (( case when PREDICTION_METH_DEF like \\u0027%minDataPoints%\\u0027 then (PREDICTION_METH_DEF::jsonb -\\u003e \\u0027minDataPoints\\u0027) else \\u00273\\u0027 end) as numeric) group by CATEGORY,ANALYSIS_MEASURE_ID,PREDICTION_TYPE,PREDICTION_METH_DEF,ANALYSIS_ID ) as pred;\\r\\n\\r\\n\\r\\nEND script_block $$;\\r\\n\",\"executionOrder\":1,\"title\":\"\"}],\"componentId\":6,\"componentName\":\"IQR_Prediction\",\"tableName\":\"IQR_Prediction\",\"category\":\"Processor\",\"componentType\":\"DB script\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":10,\"dependencies\":[1],\"className\":\"com.datagaps.dataflow.models.DBScriptComponent\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"},{\"dbScripts\":[{\"script\":\"\\r\\ndo $$\\r\\nbegin\\r\\ndeclare\\r\\nv_script character varying;\\r\\nv_count numeric;\\r\\npartition_tab_name character varying(50);\\r\\n\\r\\nbegin\\r\\n\\tSELECT REPLACE (\\u0027$[Analysis_ID]\\u0027, \\u0027-\\u0027, \\u0027_\\u0027) into partition_tab_name;\\r\\n\\r\\nv_script:\\u003d\\u0027select count(*)  from pg_class where relname \\u003d \\u0027\\u0027t_dm_prediction_\\u0027||partition_tab_name||\\u0027\\u0027\\u0027\\u0027;\\r\\nexecute v_script into v_count;if(v_count\\u003d0)\\r\\nthen\\r\\nv_script :\\u003d \\u0027CREATE TABLE t_dm_prediction_\\u0027||partition_tab_name||\\u0027 PARTITION OF T_DM_ANALYSIS_PREDICTION FOR VALUES IN (\\u0027||\\u0027\\u0027\\u0027$[Analysis_ID]\\u0027\\u0027\\u0027||\\u0027)\\u0027;\\r\\nexecute v_script;\\r\\nend if;\\r\\nend;\\r\\nend$$;\",\"executionOrder\":1,\"title\":\"\"},{\"script\":\"do $$\\r\\n\\u003c\\u003cscript_block\\u003e\\u003e\\r\\nbegin\\r\\ndelete from t_dm_analysis_prediction tp where exists (select 1 from t_dm_analysis_prediction_stg stg where \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  stg.analysis_measure_id\\u003dtp.analysis_measure_id \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  and stg.prediction_date \\u003dtp.prediction_date\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  and stg.analysis_id \\u003d \\u0027$[Analysis_ID]\\u0027\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  );\\r\\nEND script_block $$;\\r\\n\",\"executionOrder\":2,\"title\":\"\"},{\"script\":\"do $$\\r\\n\\u003c\\u003cscript_block\\u003e\\u003e\\r\\nbegin\\r\\ninsert into T_DM_ANALYSIS_PREDICTION \\r\\n(analysis_prediction_id,\\r\\n prediction_run_id,\\r\\n analysis_measure_id,\\r\\n prediction_method_id,\\r\\n CATEGORY,\\r\\n PREDICTION_DATE,\\r\\n PREDICTED_VALUE,\\r\\n LOWER_BOUND,\\r\\n UPPER_BOUND,ANALYSIS_ID)\\r\\nselect nextval(\\u0027s_prediction_id\\u0027),\\r\\nPREDICTION_RUN_ID,\\r\\nANALYSIS_MEASURE_ID,\\r\\nPREDICTION_METHOD_id,\\r\\nCATEGORY,\\r\\nPREDICTION_DATE,\\r\\nPREDICTED_VALUE,\\r\\nLOWER_BOUND,\\r\\nUPPER_BOUND,ANALYSIS_ID from T_DM_ANALYSIS_PREDICTION_STG  where ANALYSIS_ID\\u003d\\u0027$[Analysis_ID]\\u0027;\\r\\nEND script_block $$;\",\"executionOrder\":3,\"title\":\"\"},{\"script\":\"do $$\\r\\n\\u003c\\u003cscript_block\\u003e\\u003e\\r\\nbegin\\r\\nDELETE from T_DM_PREDICTION_RUN PR where EXISTS (Select 1 from (select DISTINCT AP.PREDICTION_RUN_ID,AM.ANALYSIS_ID,AP.PREDICTION_DATE from T_DM_ANALYSIS_PREDICTION_STG AP,T_DM_ANALYSIS_MEASURE AM where AP.ANALYSIS_MEASURE_ID\\u003dAM.ANALYSIS_MEASURE_ID) AP where AP.prediction_run_id\\u003dPR.prediction_run_id and AP.prediction_date\\u003dPR.prediction_date and AP.ANALYSIS_ID\\u003dPR.ANALYSIS_ID);\\r\\n\\r\\ninsert into T_DM_PREDICTION_RUN (PREDICTION_RUN_ID,ANALYSIS_ID,PREDICTION_DATE) select DISTINCT AP.PREDICTION_RUN_ID,AM.ANALYSIS_ID,AP.PREDICTION_DATE from T_DM_ANALYSIS_PREDICTION_STG AP,T_DM_ANALYSIS_MEASURE AM where AP.ANALYSIS_MEASURE_ID\\u003dAM.ANALYSIS_MEASURE_ID;\\r\\n\\r\\nEND script_block $$;\",\"executionOrder\":4,\"title\":\"\"}],\"componentId\":7,\"componentName\":\"Save_data_into_prediction_table\",\"tableName\":\"Merge_data_into_prediction_table\",\"category\":\"Processor\",\"componentType\":\"DB script\",\"rank\":0,\"dataSourceName\":\"PostgreSQLrep\",\"displayRows\":10,\"dependencies\":[4,5,6],\"className\":\"com.datagaps.dataflow.models.DBScriptComponent\",\"dataSourceLogicalName\":\"\",\"executionOption\":\"allparentpassorfail\",\"excludeNotification\":\"N\"}],\"isDeleteWorkSchemaTable\":\"N\"}","parameters":"[{\"name\":\"limit_rows\",\"defValueInInteractiveMode\":\"limit 10001\",\"defValueInBatchMode\":\"limit 10\"},{\"name\":\"future_forecast\",\"defValueInInteractiveMode\":\"5\",\"defValueInBatchMode\":\"5\"},{\"name\":\"Analysis_ID\",\"defValueInInteractiveMode\":\"f53c3b75-d30b-79e7-0232-ea3484a64d79\",\"defValueInBatchMode\":\"f53c3b75-d30b-79e7-0232-ea3484a64d79\"},{\"name\":\"Tag\",\"defValueInInteractiveMode\":null,\"defValueInBatchMode\":\"spark331 173livy\"}]","version":3,"maxComponentId":11,"livyOptions":"{\"kind\":\"spark\",\"proxyUser\":\"\",\"jars\":[],\"pyFiles\":[],\"files\":[],\"driverMemory\":\"\",\"driverCores\":0,\"executorMemory\":\"\",\"executorCores\":0,\"numExecutors\":0,\"archives\":[],\"queue\":\"\",\"name\":\"\",\"conf\":{\"spark.hadoop.google.cloud.auth.service.account.json.keyfile\":\"C:/Files/datagapsQaBigquery.json\"},\"heartbeatTimeoutInSecond\":0}","isDeleted":"N","userName":null,"type":"dataflow","environmentName":"","folderPath":"Dataflow/Lakshmi","workSchemaName":null},"analysis":[],"datamodels":[],"tagDetails":[],"dataCompares":[]}